# 서버란?
- 서버는 컴퓨터 또는 컴퓨팅 장치로, 네트워크를 통해 클라이언트 컴퓨터나 다른 장치에 서비스를 제공하는 역할을 수행하는 것.
  
- 서버에는 웹 서버, 웹 애플리케이션 서버, 프록시 서버, 데이터베이스 서버, 파일 서버, 메일서버 등등 여러 종류의 서버가 존재한다.

<br>

## 웹 서버 vs 웹 애플리케이션 서버

웹 서버 : 사용자에게 정적인 페이지를 제공하는 서버<br>

웹 애플리케이션 서버(WAS) : 서버 내 비즈니스로직, DB조회 등을 통해 동적인 페이지를 제공하는 서버. 

- 정적인 페이지를 반환해야 한다면 웹 서버가 사용자에게 정적인 페이지를 전달한다. 만약 동적인 페이지를 반환해야 한다면 웹 서버가 WAS에게 해당 요청을 전달한다. 그러면 WAS의 웹 컨테이너가 해당 연산을 수행하여 WAS에게 전달을 하고 WAS는 웹 서버한테 연산의 결과를 전달한다. 그러면 웹 서버가 해당 연산을 가지고 클라이언트에게 웹 페이지를 전달한다.

- WAS는 서블릿의 생존을 관리하는 컨테이너로 웹 서버+웹 컨테이너로 구성이 되어진다. 따라서 WAS만으로도 클라이언트에게 정적+동적인 서버를 전달할 수 있지만 여러가지 장점들의 이유로 웹서버(아파치)와 WAS(톰캣)를 분리하여 사용한다.

![](was.png)

## 왜 웹서버와 WAS를 분리할까?

1. 기능분리를 통한 서버의 부하 방지
2. 웹 서버에 여러대의 WAS 연결가능
- 규모가 큰 서비스에서 하나의 웹서버에 하나의 WAS가 연결된 구조는 많은 요청을 처리하기가 어려움

- 따라서 여러대의 WAS에 각각 요청을 들어오도록 하지 않고 웹서버를 통해 요청을 적절히 각 WAS에게 분배하여 부하를 분리할 수 있다. 이를 로드밸런싱이라 한다.

- 로드밸런서의 종류중 하나가 WAS의 아파치

![](roadbalancer.png)

1. WAS의 환경설정 파일을 외부에 노출시키지 않도록 하기 위해서
- 클라이언트와 연결하는 포트가 직접 WAS에 연결되어있다면 중요한 설정파일들이 노출 될 수 있기때문에 WAS 설정파일을 외부에 노출시키지 않도록 하기 위해서 웹서버를 앞단에 배치

- 웹서버와 WAS에 접근하는 포트가 다르기 때문에, WAS에 들어오는 포트에는 방화벽을 쳐서 보안을 강화할 수 도 있다.
  
<br>

## 프록시서버란?
<br>

![](proxyServer.png)
- 프록시 서버는 클라이언트에서 서버로 접속을 할 때 직접적으로 접속하지 않고 중간에 대신 전달해주는 서버를 의미한다.
  
- 프록시서버는 클라이언트가 서버에게 요청을 보내는 것이 아닌 프록시서버에게 요청을 보낸 뒤 프록시서버가 서버로 요청을 전달한다.

- 서버는 응답을 프록시 서버를 통해 클라이언트로 전달한다.

## 왜 사용할까?
<br>

### 1. 보안
- 클라이언트가 서버가 아닌 프록시서버를 거쳐 서버에게 요청을 보내기 때문에 서버의 IP를 숨기는 것이 가능하며 외부로부터 위험을 막아주는 역할을 한다.
- URL 필터링이나 바이러스 체크 등 보안기능 강화

### 2. 캐시
- 프록시서버에 이전에 받았던 요청에 대한 응답을 캐시를 통해 저장한 뒤 똑같은 요청이 왔을 때 서버를 거치지 않고 데이터를 주고 받을 수 있기때문에 속도면에서 이점이 있다.

- 단 캐시에 저장된 데이터를 클라이언트에게 전달할 때 동적 페이지의 경우 업데이트가 된 데이터인지 체크를 해야한다.
  
- 이러한 이유로 동적인 페이지에 대한 캐시의 효과가 떨어지며 최근 동적 페이지의 비중이 늘고있기때문에 캐시기능만을 위해서 프록시 서버를 사용하는 경우는 드물다고 하네요.

<br>

# 클라이언트란?
- 서버에게 서비스를 요청하고 서버로부터 응답을 받는 컴퓨터나 장치.
  
- 클라이언트는 사용자와 상호작용하며 서버로부터 필요한 정보를 받아오는 역할을 수행
  
- 서버와 클라이언트는 네트워크를 통해 통신한다.

<br>

# J2EE란?

- J2EE는 자바 기술로 기업환경의 어플리케이션을 만드는데 필요한 스펙들을 모아둔 스펙 집합

-  Java EE(Java Platform, Enterprise Edition) 라고도 불리며 JAVA SE 플랫폼을 기반으로 그 위에 탑재된 것을 의미한다.

- J2EE는 웹 애플리케이션, 비즈니스 로직, 데이터베이스 연동, 보안 등의 다양한 기업급 애플리케이션 개발에 필요한 컴포넌트와 서비스를 제공한다.

- J2EE의 구성요소는 Servlet, JSP, EJB, JDBC 등이 있다. 

<br>

## Java EE, Java SE

- Java SE는 가장 대중적인 자바 플랫폼으로 java.lang.*, java.util.*과 같은 대부분의 패키지가 포함된 에디션이다.

- Java SE의 API는 자바 프로그래밍 언어의 핵심기능들을 제공한다. EX) 타입, 데이터베이스 처리, 보안, 네트워킹 등등...

- jAVA EE는 Java SE의 기능에 더해 JSP, Servlet, JDBC, EJB등 웹 프로그래밍에 필요한 기능 다수를 포함한 에디션이다.

## EJB, JSP, Servlet이란?

- EJB : Enterprise JavaBeans의 약자로 Java EE 플랫폼에서 비즈니스 로직을 구현하고 실행하기 위한 컴포넌트 모델을 제공하는 것으로 자바의 빈 객체를 재사용 가능하도록 정의하여 편리하게 개발 할 수 있도록 발표한 스펙이다.

- Servlet : 클라이언트의 요청을 처리하고, 그 결과를 반환하는 서블릿 클래스의 구현 규칙을 지킨 자바 웹 프로그래밍 기술로 스레드를 이용하며 html코드를 사용하여 응답한다.
  
![](servlet.png)
- JSP : 서블릿이 자바코드에 HTML코드를 생성하는 방식으로 응답을 제공했다면 JSP는 HTML코드에 자바코드를 집어넣어 동적인 HTML파일을 제공하는 방식. JSP를 실행하면 내부에서 서블릿으로 변환이 된다.

![](jsp.png)

## EJB 자세히 살펴보기
개발을 하다보면 많은 객체들을 만들게 된다. EJB는 대규모 엔터프라이즈 애플리케이션 개발을 하기위한 도구와 환경을 제공하는 역할을 한다.

### 1. 비즈니스 로직 컴포넌트 
- EJB는 DB와의 상호작용, 트랜잭션, 인스턴스 풀링을 제공한다.
- 인스턴스 풀링 : 객체를 미리 생성해 메모리에 저장한 뒤 필요할 떄 사용하는 방식.
  
### 2. 분산 환경 지원
- EJB는 분산 환경에서 실행될 수 있도록 설계되어 다수의 서버에서 애플리케이션을 실행하고 필요에 따라 부하 분산이 가능하다.

### 3. 스레드관리
- EJB는 스레드를 자동으로 관리 및 처리해주어 비즈니스로직에 집중이 가능하다.

### 4. 재사용성
- 비즈니스 로직을 독립적인 컴포넌트로 작성이 가능하며 이를 재사용하여 사용한다.

## EJB의 단점

### 1. 특정 환경, 기술에 종속
- 애플리케이션이 특정 기술이나 모듈에 종속적이다. 이는 기술이나 모듈의 수정이나 deprecated가 발생할 떄 서비스에 영향을 줄 수 있다는 단점이 있다.

### 2. 단위 테스트가 어렵다.
- EJB는 독립적이지 않기때문에 EJB컨테이너 외부에서 테스트를 진행하는 것이 어렵다.

### 3. 객체지향적이지 않다,
- 상속, 다형성과 같은 객체지향의 이점을 사용할 수 없다.
- 하나의 기능을 구현하기 위해서는 EJB에 구현된 불필요한 객체들로부터 상속을 받아야하며 사용하지 않는 기능들까지 구현 및 포함이 되기때문에 객체의 생성 및 소멸이 느려지고 객체간의 효율적인 통신이 어려워진다.
- 객체 자체가 무거워지기때문에 소규모 프로젝트에 적합하지 않으며 성능에 문제가 있다.

# Spring의 등장
이러한 EJB의 단점을 해결하기 위해 스프링이 등장했다. 스프링이란 엔터프라이즈용 Java 애플리케이션 개발을 편하게 할 수 있게 해주는 오픈소스 경량급 애플리케이션 프레임워크를 의미한다.

### 오픈소스
- 스프링은 사용자에게 무료로 열려있으며 필요하다면 사용자가 코드를 수정하여 사용해도 무관하다. 또한 스프링은 오픈소스 프레임워크이지만 안정적인 개발과 개선이 보장되어있는 장점이 있다.

### 경량급
- 스프링을 정의함에 있어 경량급 애플리케이션 프레임워크라 함은, 스프링을 사용함으로써 기존 기술을 사용할 때에 불가피하게 작성해야만 했던 불필요하게 복잡한 코드를 제거하여 코드의 복잡성을 낮출 수 있음을 의미한다.

# 스프링의 장점 및 특징

1. POJO기반의 프로그래밍 지향
   - POJO는 순수 자바를 사용하여 생성한 객체를 의미한다. 따라서 외부 라이브러리나 기술에 영향을 받지 않고 개발이 가능하며 독립적이기 때문에 테스트가 쉬어진다.
   -  객체지향적인 설계가 가능하다.

2. 트랜잭션 지원
   - 데이터베이스를 연동하여 사용할 때 반드시 신경써야하는 부분인 트랜잭션을 쉽게 사용할 수 있다. 

3. 다양한 모듈화 기능
   - 스프링은 다양한 모듈화 기능을 제공하여 필요한 부분만 선택적으로 사용할 수 있다.
   - 스프링 MVC 모듈은 웹 애플리케이션을 개발할 때 사용되며, 스프링 JDBC 모듈은 데이터베이스와의 상호작용을 지원한다.

4. IoC/DI( Inversion of Control / Dependency Injection )
   - 스프링에서는 필요한 객체를 new를 통해서가 아닌 주입하는 방식으로 생성한다. 
   - 이는 객체간의 결합도를 낮추어 유연한 개발을 가능하게 한다.
5. AOP( Aspect Oriented Programming )
   - 스프링은 각 기능들의 공통 관심사를 따로 분리하여 관리하는 AOP를 지원한다.
   - 이는 코드의 중복을 줄여줌.
6. PSA ( Portable Service Abstraction)
   - 사용하는 기술에 변경이 있더라도 코드의 수정없이 기술을 변경할 수 있다.
   - 내부적으로 JDBC를 추상화했기 때문에 사용하는 데이터베이스를 오라클에서 Mysql로 변경 시 드라이버만 변경하면 기술변경이 가능하다.